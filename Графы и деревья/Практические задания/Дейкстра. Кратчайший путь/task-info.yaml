type: edu
files:
  - name: task.py
    visible: true
    placeholders:
      - offset: 693
        length: 79
        placeholder_text: "...  # TODO вернуть стоимость путей до всех вершин посчитан\
      ных алгоритмом Дейкстры"
        initial_state:
          length: 82
          offset: 693
        initialized_from_dependency: false
        encrypted_possible_answer: |-
          _, coasts = nx.dijkstra_predecessor_and_distance(g, starting_node)
              for node in g.nodes:
                  if node not in coasts:
                      coasts[node] = float("inf")
          
              return coasts
        selected: true
        status: Solved
      - offset: 991
        length: 22
        placeholder_text: "...  # TODO записать граф"
        initial_state:
          length: 25
          offset: 809
        initialized_from_dependency: false
        encrypted_possible_answer: |-
          graph = nx.DiGraph()
              graph.add_weighted_edges_from([
                  (1, 2, 7),
                  (1, 3, 9),
                  (1, 6, 14),
                  (2, 3, 10),
                  (2, 4, 15),
                  (3, 4, 11),
                  (3, 6, 2),
                  (4, 5, 6),
                  (5, 6, 9),
              ])
        selected: true
        status: Solved
    learner_created: false
  - name: tests/test_task.py
    visible: false
    learner_created: false
  - name: __init__.py
    visible: false
    learner_created: false
  - name: tests/__init__.py
    visible: false
    learner_created: false
  - name: img.png
    visible: true
    is_binary: true
    learner_created: false
status: Solved
feedback:
  message: Congratulations!
  time: "Fri, 04 Jul 2025 16:32:40 UTC"
record: -1
